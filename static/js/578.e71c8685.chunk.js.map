{"version":3,"file":"static/js/578.e71c8685.chunk.js","mappings":"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","sources":["redux/selectors.jsx","components/ContactList/ContactList.styled.js","components/ContactItems/ContactItems.styled.js","components/ContactItems/ContactItems.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","views/ContactsView.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectValueFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectValueFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n  width: 450px;\n  margin-top: 20px;\n  background-color: white;\n`;\nexport const Contact = styled.li`\n  display: flex;\n  gap: 5px;\n  width: 100%;\n  margin-top: 10px;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: stretch;\n  justify-content: flex-start;\n  align-items: baseline;\n`;\n","import styled from \"styled-components\";\n\nexport const WrapItem = styled.div`\ndisplay: flex;\nwidth: 350px;\ngap: 8px;\n`\nexport const DeleteBtn = styled.button`\nbackground-color: lightpink;\nborder-radius: 4px;\nborder: 2px solid red;\nfont-size: 14px;\nfont-weight: 500;\ncursor: pointer;\nwidth: 100px;\nheight: 30px;\n:hover{\n    background-color: white;\n    color: red;\n    border: 3px solid red;\n    font-weight: 600;\n}\n`\nexport const Item = styled.p`\nfont-size: 16px;\nfont-weight: 600;\n`\nexport const Wrap = styled.div`\ndisplay: flex;\ngap: 10px;\n\n`","import PropTypes from 'prop-types';\nimport { DeleteBtn, Item, WrapItem, Wrap } from './ContactItems.styled';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport { GiRotaryPhone } from 'react-icons/gi';\nimport { useState } from 'react';\nimport { existContacts } from '../../redux/contacts/operations';\n\nexport const ContactItems = ({ id, name: nameValue, number: numberValue }) => {\n  const dispatch = useDispatch();\n  const [isEdit, setIsEdit] = useState(false);\n  const [name, setName] = useState(nameValue);\n  const [number, setNumber] = useState(numberValue);\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  const handleChangeMode = () => {\n    if (isEdit) {\n      setIsEdit(prev => !prev);\n      dispatch(existContacts({ id, name, number }));\n      return;\n    }\n    setIsEdit(prev => !prev);\n  };\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case 'name':\n        setName(e.target.value);\n        return;\n      case 'number':\n        setNumber(e.target.value);\n        return;\n      default:\n        return;\n    }\n  };\n\n  return (\n    <Wrap>\n      <GiRotaryPhone />\n      <WrapItem>\n        {isEdit ? (\n          <input type=\"text\" value={name} name='name' onChange={handleChange} />\n        ) : (\n          <Item>{name}:</Item>\n        )}\n        {isEdit ? (\n          <input\n            type=\"text\"\n            value={number}\n            name='number'\n            onChange={handleChange}\n          />\n        ) : (\n          <Item>{number}</Item>\n        )}\n      </WrapItem>\n      <div>\n        <DeleteBtn onClick={handleDelete}>Delete</DeleteBtn>\n        <DeleteBtn onClick={handleChangeMode}>\n          {isEdit ? 'Save' : 'Edit'}\n        </DeleteBtn>\n      </div>\n    </Wrap>\n  );\n};\n\nContactItems.propTypes = {\n  item: PropTypes.objectOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n}.isRequired;\n","import PropTypes from 'prop-types';\nimport { List, Contact } from './ContactList.styled';\nimport { ContactItems } from '../ContactItems/ContactItems';\n\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/selectors';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  console.log(contacts)\n\n  return (\n    <>\n      {/* {contacts.length > 0 && ( */}\n      <List>\n        <div>\n          {contacts.map(contact => (\n            <Contact key={contact.id}>\n              <ContactItems id={contact.id} name={contact.name} number={contact.number}/>\n            </Contact>\n          ))}\n        </div>\n      </List>\n      {/* )} */}\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\nexport const FormAddContacts = styled.div`\ndisplay: flex;\ngap: 20px;\n`;\nexport const AddContactBtn = styled.button`\n    margin-top: 20px;\n    display: block;\n    font-size: 12px;\n    font-weight: 500;\n    cursor: pointer;\n    background-color:  #72759c;\n    border-radius: 4px;\n    border: 2px solid black;\n    color: white;\n    width: 100px;\n    height: 30px;\n    margin-bottom: 20px;\n    :hover{\n    background-color: green;\n    border: 3px solid green;\n    font-weight: 600;\n}\n`;\nexport const ErrorText = styled.p`\ncolor: red\n`\n\nexport const Label = styled.label`\ndisplay: flex;\ngap: 8px;\nfont-size: 16px;\nfont-weight: 600;\n`","import {\n  AddContactBtn,\n  Label,\n  FormAddContacts,\n  ErrorText,\n} from './ContactForm.styled';\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/selectors';\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const listContacts = useSelector(selectContacts);\n\n  const submitForm = (values, { resetForm }) => {\n    \n    if (listContacts.some(item => item.name === values.name)) {\n      alert(`Contact <${values.name}> has already been added ⛔`)\n      return\n    }\n\n    dispatch(addContact(values));\n    alert(`Contact <${values.name}> was add ✅`)\n    resetForm();\n\n    // };\n  };\n  const nameInputId = nanoid();\n  const telInputId = nanoid();\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={submitForm}\n    >\n      <Form>\n        <FormAddContacts>\n          <Label htmlFor={nameInputId}>\n            Name\n            <Field\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Jacob Mercer\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n              id={nameInputId}\n            />\n            <FormError name=\"name\" component=\"span\" />\n          </Label>\n\n          <Label htmlFor={telInputId}>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"+380000000000\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              id={telInputId}\n            />\n            <FormError name=\"number\" component=\"span\" />\n          </Label>\n        </FormAddContacts>\n\n        <AddContactBtn type=\"submit\">Add contacts</AddContactBtn>\n        \n      </Form>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Label = styled.label`\nmargin-right: 8px;\nalign-items: center;\nfont-size: 16px;\nfont-weight: 600;\n`\nexport const Input = styled.input`\nwidth: 400px;\nheight: 20px;\n`","import { Label, Input } from './Filter.styled';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from '../../redux/filter/filterSlice';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectValueFilter } from '../../redux/selectors';\nimport PropTypes from 'prop-types';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectValueFilter);\n  const idInput = nanoid();\n\n  const changeFilter = e => {\n    const value = e.currentTarget.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <>\n      <Label htmlFor=\"idInput\">Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={changeFilter}\n        id={idInput}\n      ></Input>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string\n}.isRequired","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectError } from '../redux/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchAllContacts } from '../redux/contacts/operations';\nimport { selectIsLoading } from '../redux/selectors';\n\nconst ContactsView = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts())    \n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Phonebook</title>\n      </Helmet>\n\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && (\n        <h3>Please waite the request in progress...🐌</h3>\n      )}\n      {error && !isLoading && (\n        <h4>Something went wrong... ♫ ♫ ♫ Try later ♫ ♫ ♫</h4>\n      )}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsView;"],"names":["selectContacts","state","contacts","items","selectValueFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","List","styled","Contact","WrapItem","DeleteBtn","Item","Wrap","ContactItems","id","nameValue","numberValue","number","dispatch","useDispatch","useState","isEdit","setIsEdit","setName","setNumber","handleChange","e","target","value","type","onChange","onClick","deleteContact","prev","existContacts","ContactList","useSelector","console","log","map","FormAddContacts","AddContactBtn","ErrorText","Label","FormError","render","message","ContactForm","listContacts","nameInputId","nanoid","telInputId","initialValues","onSubmit","values","resetForm","some","item","alert","addContact","htmlFor","placeholder","pattern","title","required","component","Input","Filter","idInput","currentTarget","setFilter","useEffect","fetchAllContacts","Helmet"],"sourceRoot":""}